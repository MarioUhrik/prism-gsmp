//==============================================================================
//	
//	Copyright (c) 2018-
//	Authors:
//	* Mario Uhrik <433501@mail.muni.cz> (Masaryk University)
//	
//------------------------------------------------------------------------------
//	
//	This file is part of PRISM.
//	
//	PRISM is free software; you can redistribute it and/or modify
//	it under the terms of the GNU General Public License as published by
//	the Free Software Foundation; either version 2 of the License, or
//	(at your option) any later version.
//	
//	PRISM is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//	
//	You should have received a copy of the GNU General Public License
//	along with PRISM; if not, write to the Free Software Foundation,
//	Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//	
//==============================================================================

package explicit;

import java.util.BitSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import explicit.rewards.ACTMCRewardsSimple;
import explicit.rewards.MCRewards;
import prism.PrismException;

/**
 * Class for reduction of ACTMC to equivalent DTMC. (and also their reward structures)
 * <br>
 * This class fulfills similar purpose to class {@code ACTMCPotatoData},
 * but on the scope of the entire ACTMC, whereas the scope of {@code ACTMCPotatoData}
 * only encompasses a single event.
 */
public class ACTMCReduction
{
	/** ACTMC model this class is associated with */
	private ACTMCSimple actmc;
	/** Optional reward structure associated with {@code actmc}.
	 *  May be null if rewards are not of interest for given model checking method.*/
	private ACTMCRewardsSimple actmcRew = null;
	/** Optional bitset of target states (for reachability) */
	private BitSet target = null;
	/** Map where the keys are string identifiers of the GSMPEvents,
	 *  and the values are corresponding ACTMCPotatoData structures.
	 *  This is useful for fast access and efficient reusage of the ACTMCPotatoData structures.*/
	private Map<String, ACTMCPotatoData> pdMap;
	/** DTMC equivalent to {@code actmc} eventually generated by this class.
	 *  Initially null.*/
	private DTMCSimple dtmc = null;
	private MCRewards dtmcRew = null;
	
	/**
	 * The only constructor
	 * @param actmc Associated ACTMC model. Must not be null!
	 * @param actmcRew Optional reward structure associated with {@code actmc}. May be null.
	 * @param target Optional bitset of target states (if doing reachability). May be null.
	 * @throws Exception if the arguments break the above rules
	 */
	public ACTMCReduction(ACTMCSimple actmc, ACTMCRewardsSimple actmcRew, BitSet target) throws PrismException {
		if (actmc == null) {
			throw new NullPointerException("ACTMCReduction constructor has received a null actmc!");
		}
		this.actmc = actmc;
		this.actmcRew = actmcRew;
		this.target = target;
		this.pdMap = createPotatoDataMap(actmc, actmcRew, target);
	}
	
	public DTMCSimple getDTMC() {
		if (dtmc == null) {
			computeEquivalentDTMC();
		}
		return dtmc;
	}
	
	private void computeEquivalentDTMC() {
		// TODO MAJO - think of better names
		// TODO MAJO - continue here!
		/*
		computeKappaOne();
		computeKappaTwo();
		computeKappa();
		
		constructEquivalentDTMC();
		constructEquivalentDTMCRew();
		*/
	}
	
	/**
	 * Creates a map where the keys are string identifiers of the GSMPEvents,
	 * and the values are corresponding ACTMCPotatoData structures.
	 * This is useful as to enable reusage of the ACTMCPotatoData structures efficiently.
	 * @param actmc ACTMC model for which to create the ACTMCPotatoData structures
	 * @param rew Optional rewards associated with {@code actmc}. May be null, but calls
	 *            to {@code ACTMCPotatoData.getMeanReward()} will throw an exception!
	 */
	private Map<String, ACTMCPotatoData> createPotatoDataMap(ACTMCSimple actmc,
			ACTMCRewardsSimple rew, BitSet target) throws PrismException {
		Map<String, ACTMCPotatoData> pdMap = new HashMap<String, ACTMCPotatoData>();
		List<GSMPEvent> events = actmc.getEventList();
		
		for (GSMPEvent event: events) {
			ACTMCPotatoData potatoData = new ACTMCPotatoData(actmc,
					event,
					rew,
					target);
			pdMap.put(event.getIdentifier(), potatoData);
		}
		return pdMap;
	}
	
}